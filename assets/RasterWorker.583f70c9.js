import{dH as a,dr as c,r as i,h2 as m,cJ as n,h3 as f,h4 as u,h5 as h,h6 as d,h7 as p,h8 as S,h as O,h9 as x,ha as y,hb as J}from"./index.a2b594ae.js";import{M as N,k as b,V as g}from"./rasterProjectionHelper.1279bba3.js";import{i as w}from"./utils.01d71b21.js";class P{convertVectorFieldData(e){const t=a.fromJSON(e.pixelBlock),s=c(t,e.type);return Promise.resolve(i(s)&&s.toJSON())}async decode(e){const t=await m(e.data,e.options);return t&&t.toJSON()}symbolize(e){e.pixelBlock=a.fromJSON(e.pixelBlock),e.extent=e.extent?n.fromJSON(e.extent):null;const t=this.symbolizer.symbolize(e);return Promise.resolve(i(t)&&t.toJSON())}async updateSymbolizer(e){var t;this.symbolizer=f.fromJSON(e.symbolizerJSON),e.histograms&&((t=this.symbolizer)==null?void 0:t.rendererJSON.type)==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=e.histograms)}stretch(e){const t=this.symbolizer.simpleStretch(a.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(i(t)&&t.toJSON())}estimateStatisticsHistograms(e){const t=u(a.fromJSON(e.srcPixelBlock));return Promise.resolve(t)}split(e){const t=h(a.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel);return t&&t.forEach((s,o)=>{t.set(o,s==null?void 0:s.toJSON())}),Promise.resolve(t)}async mosaicAndTransform(e){const t=e.srcPixelBlocks.map(l=>l?new a(l):null),s=d(t,e.srcMosaicSize,{blockWidths:e.blockWidths,alignmentInfo:e.alignmentInfo,clipOffset:e.clipOffset,clipSize:e.clipSize});let o,r=s;return e.coefs&&(r=p(s,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation)),e.projectDirections&&e.gcsGrid&&(o=S(e.destDimension,e.gcsGrid),r=O(x(r,e.isUV?"vector-uv":"vector-magdir",o))),{pixelBlock:r==null?void 0:r.toJSON(),localNorthDirections:o}}async createFlowMesh(e,t){const s={data:new Float32Array(e.flowData.buffer),mask:new Uint8Array(e.flowData.maskBuffer),width:e.flowData.width,height:e.flowData.height},{vertexData:o,indexData:r}=await y(e.meshType,e.simulationSettings,s,t.signal);return{result:{vertexBuffer:o.buffer,indexBuffer:r.buffer},transferList:[o.buffer,r.buffer]}}async getProjectionOffsetGrid(e){const t=n.fromJSON(e.projectedExtent),s=n.fromJSON(e.srcBufferExtent);let o=null;e.datumTransformationSteps&&(o=new J({steps:e.datumTransformationSteps})),(e.includeGCSGrid||N(t.spatialReference,s.spatialReference,o))&&await b();const r=e.rasterTransform?w(e.rasterTransform):null;return g({...e,projectedExtent:t,srcBufferExtent:s,datumTransformation:o,rasterTransform:r})}}export{P as default};
