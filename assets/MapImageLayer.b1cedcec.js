import{jj as x,kn as w,jk as I,ep as O,eq as j,er as E,es as M,jl as k,jy as T,km as $,Z as J,r as L,aQ as P,kw as b,kH as g,kI as f,e3 as N,dU as R,f as S,U as v,p as U,cJ as q,dY as F,jz as A,kJ as z,$ as s,a0 as o,d_ as V,bQ as _,ev as H,a1 as C,ew as D,jm as G}from"./index.a2b594ae.js";import{E as K,y as W,X as B}from"./SublayersOwner.935d184c.js";import"./Version.1afc107d.js";let r=class extends x(w(I(K(W(O(j(E(M(k(T($(J(D))))))))))))){constructor(...e){super(...e),this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,a){return typeof e=="string"?{url:e,...a}:e}load(e){const a=L(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(P).then(()=>this._fetchService(a))),Promise.resolve(this)}readImageFormat(e,a){const y=a.supportedImageFormatTypes;return y&&y.includes("PNG32")?"png32":"png24"}writeSublayers(e,a,y,t){if(!this.loaded||!e)return;const l=e.slice().reverse().flatten(({sublayers:i})=>i&&i.toArray().reverse()).toArray();let n=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&this.capabilities.exportMap.supportsDynamicLayers){const i=b(t.origin);if(i===g.PORTAL_ITEM){const h=this.createSublayersForOrigin("service").sublayers;n=f(l,h,g.SERVICE)}else if(i>g.PORTAL_ITEM){const h=this.createSublayersForOrigin("portal-item");n=f(l,h.sublayers,b(h.origin))}}const p=[],c={writeSublayerStructure:n,...t};let u=n;l.forEach(i=>{const h=i.write({},c);p.push(h),u=u||i.originOf("visible")==="user"}),p.some(i=>Object.keys(i).length>1)&&(a.layers=p),u&&(a.visibleLayers=l.filter(i=>i.visible).map(i=>i.id))}createExportImageParameters(e,a,y,t){const l=t&&t.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const n=new N({layer:this,floors:t==null?void 0:t.floors,scale:R({extent:e,width:a})*l}),p=n.toJSON();n.destroy();const c=!t||!t.rotation||this.version<10.3?{}:{rotation:-t.rotation},u=e&&e.spatialReference,i=u.wkid||JSON.stringify(u.toJSON());p.dpi*=l;const h={};if(t!=null&&t.timeExtent){const{start:d,end:m}=t.timeExtent.toJSON();h.time=d&&m&&d===m?""+d:`${d==null?"null":d},${m==null?"null":m}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(h.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:i,imageSR:i,size:a+","+y,...p,...c,...h}}async fetchImage(e,a,y,t){var p;const l={responseType:"image",signal:(p=t==null?void 0:t.signal)!=null?p:null,query:{...this.parsedUrl.query,...this.createExportImageParameters(e,a,y,t),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},n=this.parsedUrl.path+"/export";if(l.query.dynamicLayers!=null&&!this.capabilities.exportMap.supportsDynamicLayers)throw new S("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:l.query});return v(n,l).then(c=>c.data).catch(c=>{throw U(c)?c:new S("mapimagelayer:image-fetch-error",`Unable to load image: ${n}`,{error:c})})}async fetchRecomputedExtents(e={}){const a={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:y}=await v(this.url,a),{extent:t,fullExtent:l,timeExtent:n}=y,p=t||l;return{fullExtent:p&&q.fromJSON(p),timeExtent:n&&F.fromJSON({start:n[0],end:n[1]})}}loadAll(){return A(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return z(this,e)}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:a,ssl:y}=await v(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});y&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=a,this.read(a,{origin:"service",url:this.parsedUrl})}};s([o({type:Boolean})],r.prototype,"datesInUnknownTimezone",void 0),s([o()],r.prototype,"dpi",void 0),s([o()],r.prototype,"gdbVersion",void 0),s([o()],r.prototype,"imageFormat",void 0),s([V("imageFormat",["supportedImageFormatTypes"])],r.prototype,"readImageFormat",null),s([o({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],r.prototype,"imageMaxHeight",void 0),s([o({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],r.prototype,"imageMaxWidth",void 0),s([o()],r.prototype,"imageTransparency",void 0),s([o({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],r.prototype,"isReference",void 0),s([o({json:{read:!1,write:!1}})],r.prototype,"labelsVisible",void 0),s([o({type:["ArcGISMapServiceLayer"]})],r.prototype,"operationalLayerType",void 0),s([o({json:{read:!1,write:!1}})],r.prototype,"popupEnabled",void 0),s([o()],r.prototype,"sourceJSON",void 0),s([o({json:{write:{ignoreOrigin:!0}}})],r.prototype,"sublayers",void 0),s([_("sublayers",{layers:{type:[B]},visibleLayers:{type:[G]}})],r.prototype,"writeSublayers",null),s([o({type:["show","hide","hide-children"]})],r.prototype,"listMode",void 0),s([o({json:{read:!1},readOnly:!0,value:"map-image"})],r.prototype,"type",void 0),s([o(H)],r.prototype,"url",void 0),r=s([C("esri.layers.MapImageLayer")],r);const Z=r;export{Z as default};
